#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 3  // Define the matrix size

// Function to multiply two matrices
void multiply_matrices(int result[SIZE][SIZE], int matrix1[SIZE][SIZE], int matrix2[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            result[i][j] = 0;
            for (int k = 0; k < SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
                result[i][j] %= 26;
            }
        }
    }
}

// Function to find the modular inverse of a matrix
void matrix_inverse(int result[SIZE][SIZE], int matrix[SIZE][SIZE]) {
    // For simplicity, using pre-defined inverse for SIZE = 3 (hard-coded for educational purposes)
    // Real application requires calculating matrix inverse mod 26.
    int inverse[SIZE][SIZE] = {
        {5, 8, 21},
        {9, 4, 7},
        {3, 1, 10}
    };
    memcpy(result, inverse, SIZE * SIZE * sizeof(int));
}

// Function to encrypt plaintext using the Hill cipher
void hill_encrypt(const char *plaintext, char *ciphertext, int key[SIZE][SIZE]) {
    int block[SIZE] = {0};
    int result[SIZE][SIZE];
    int len = strlen(plaintext);

    for (int i = 0; i < len; i += SIZE) {
        // Convert plaintext block to matrix
        for (int j = 0; j < SIZE; j++) {
            block[j] = plaintext[i + j] - 'A';
        }
        
        // Multiply matrices
        multiply_matrices(result, key, (int[][SIZE]){ block });
        
        // Convert matrix to ciphertext block
        for (int j = 0; j < SIZE; j++) {
            ciphertext[i + j] = result[0][j] + 'A';
        }
    }
    ciphertext[len] = '\0';
}

// Function to decrypt ciphertext using the Hill cipher
void hill_decrypt(const char *ciphertext, char *plaintext, int key[SIZE][SIZE]) {
    int block[SIZE] = {0};
    int result[SIZE][SIZE];
    int len = strlen(ciphertext);

    // Find inverse matrix
    int inv_key[SIZE][SIZE];
    matrix_inverse(inv_key, key);

    for (int i = 0; i < len; i += SIZE) {
        // Convert ciphertext block to matrix
        for (int j = 0; j < SIZE; j++) {
            block[j] = ciphertext[i + j] - 'A';
        }
        
        // Multiply matrices
        multiply_matrices(result, inv_key, (int[][SIZE]){ block });
        
        // Convert matrix to plaintext block
        for (int j = 0; j < SIZE; j++) {
            plaintext[i + j] = result[0][j] + 'A';
        }
    }
    plaintext[len] = '\0';
}

int main() {
    int key[SIZE][SIZE] = {
        {6, 24, 1},
        {13, 16, 10},
        {20, 17, 15}
    };
    char plaintext[256];
    char ciphertext[256];
    char decrypted_text[256];

    printf("Enter plaintext (length should be a multiple of %d): ", SIZE);
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove newline character

    hill_encrypt(plaintext, ciphertext, key);
    printf("Encrypted text: %s\n", ciphertext);

    hill_decrypt(ciphertext, decrypted_text, key);
    printf("Decrypted text: %s\n", decrypted_text);

    return 0;
}
