#include <stdio.h>
#include <stdlib.h>

// Define S-Boxes for S-DES
int S1[4][4] = {
    {1, 0, 3, 2},
    {3, 2, 1, 0},
    {0, 2, 1, 3},
    {3, 1, 3, 2}
};

int S2[4][4] = {
    {0, 1, 2, 3},
    {2, 0, 3, 1},
    {3, 0, 1, 2},
    {0, 2, 1, 3}
};

// Function to permute bits according to the specified table
void permute(int *input, int *output, int *table, int size) {
    for (int i = 0; i < size; i++) {
        output[i] = input[table[i] - 1];
    }
}

// Function to perform the S-Box substitution
int s_box(int s[4][4], int row, int col) {
    return s[row][col];
}

// Function for the P4 permutation
void p4(int *input, int *output) {
    int p4[4] = {2, 4, 3, 1};
    for (int i = 0; i < 4; i++) {
        output[i] = input[p4[i] - 1];
    }
}

// Function to generate the subkeys
void generate_subkeys(int *key, int *k1, int *k2) {
    int pc1[10] = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
    int pc2[8] = {6, 3, 7, 4, 8, 5, 10, 9};
    int permuted_key[10];

    permute(key, permuted_key, pc1, 10);

    int left_shifted_key[10];
    for (int i = 0; i < 10; i++) {
        left_shifted_key[i] = permuted_key[i];
    }

    // Left shift
    for (int i = 0; i < 2; i++) {
        int temp = left_shifted_key[0];
        for (int j = 0; j < 9; j++) {
            left_shifted_key[j] = left_shifted_key[j + 1];
        }
        left_shifted_key[9] = temp;
    }

    permute(left_shifted_key, k1, pc2, 8);

    // Generate k2 by left shifting k1 by one more step
    int shifted_key[10];
    for (int i = 0; i < 10; i++) {
        shifted_key[i] = left_shifted_key[i];
    }

    int temp = shifted_key[0];
    for (int i = 0; i < 9; i++) {
        shifted_key[i] = shifted_key[i + 1];
    }
    shifted_key[9] = temp;

    permute(shifted_key, k2, pc2, 8);
}

// Function to perform the S-DES encryption
void s_des_encrypt(int *plaintext, int *key, int *ciphertext) {
    int k1[8], k2[8];
    generate_subkeys(key, k1, k2);

    int initial_permutation[8] = {2, 6, 3, 1, 4, 8, 5, 7};
    int permuted_plaintext[8];

    permute(plaintext, permuted_plaintext, initial_permutation, 8);

    int left_half[4], right_half[4];
    for (int i = 0; i < 4; i++) {
        left_half[i] = permuted_plaintext[i];
        right_half[i] = permuted_plaintext[i + 4];
    }

    int temp_right[4];
    for (int i = 0; i < 4; i++) {
        temp_right[i] = right_half[i];
    }

    // Round function
    for (int i = 0; i < 4; i++) {
        right_half[i] = (right_half[i] + k1[i]) % 2;
    }

    for (int i = 0; i < 4; i++) {
        right_half[i] = s_box(S1, right_half[i], left_half[i]);
    }

    for (int i = 0; i < 4; i++) {
        right_half[i] = (right_half[i] + k2[i]) % 2;
    }

    for (int i = 0; i < 4; i++) {
        right_half[i] = s_box(S2, right_half[i], left_half[i]);
    }

    int swap_temp[4];
    for (int i = 0; i < 4; i++) {
        swap_temp[i] = left_half[i];
        left_half[i] = right_half[i];
        right_half[i] = swap_temp[i];
    }

    int final_permutation[8] = {4, 1, 3, 5, 7, 2, 8, 6};
    permute(right_half, left_half, final_permutation, 8);

    for (int i = 0; i < 8; i++) {
        ciphertext[i] = right_half[i];
    }
}

// Function to perform the S-DES decryption
void s_des_decrypt(int *ciphertext, int *key, int *plaintext) {
    int k1[8], k2[8];
    generate_subkeys(key, k1, k2);

    int initial_permutation[8] = {2, 6, 3, 1, 4, 8, 5, 7};
    int permuted_ciphertext[8];

    permute(ciphertext, permuted_ciphertext, initial_permutation, 8);

    int left_half[4], right_half[4];
    for (int i = 0; i < 4; i++) {
        left_half[i] = permuted_ciphertext[i];
        right_half[i] = permuted_ciphertext[i + 4];
    }

    int temp_right[4];
    for (int i = 0; i < 4; i++) {
        temp_right[i] = right_half[i];
    }

    // Round function
    for (int i = 0; i < 4; i++) {
        right_half[i] = (right_half[i] + k2[i]) % 2;
    }

    for (int i = 0; i < 4; i++) {
        right_half[i] = s_box(S2, right_half[i], left_half[i]);
    }

    for (int i = 0; i < 4; i++) {
        right_half[i] = (right_half[i] + k1[i]) % 2;
    }

    for (int i = 0; i < 4; i++) {
        right_half[i] = s_box(S1, right_half[i], left_half[i]);
    }

    int swap_temp[4];
    for (int i = 0; i < 4; i++) {
        swap_temp[i] = left_half[i];
        left_half[i] = right_half[i];
        right_half[i] = swap_temp[i];
    }

    int final_permutation[8] = {4, 1, 3, 5, 7, 2, 8, 6};
    permute(right_half, left_half, final_permutation, 8);

    for (int i = 0; i < 8; i++) {
        plaintext[i] = right_half[i];
    }
}

int main() {
    int plaintext[8] = {0, 0, 0, 0, 0, 0, 0, 1}; // Example plaintext
    int key[10] = {0, 1, 1, 1, 1, 1, 1, 0, 1, 0}; // Example key
    int ciphertext[8];
    int decryptedtext[8];

    // Encrypt
    s_des_encrypt(plaintext, key, ciphertext);
    printf("Ciphertext: ");
    for (int i = 0; i < 8; i++) {
        printf("%d", ciphertext[i]);
    }
    printf("\n");

    // Decrypt
    s_des_decrypt(ciphertext, key, decryptedtext);
    printf("Decrypted Text: ");
    for (int i = 0; i < 8; i++) {
        printf("%d", decryptedtext[i]);
    }
    printf("\n");

    return 0;
}
