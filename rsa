#include <stdio.h>
int extended_gcd(int a, int b, int *x, int *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    } else {
        int x1, y1;
        int gcd = extended_gcd(b, a % b, &x1, &y1);
        *x = y1;
        *y = x1 - (a / b) * y1;
        return gcd;
    }
}
int mod_inverse(int e, int phi) {
    int x, y;
    int g = extended_gcd(e, phi, &x, &y);
    if (g != 1) {
        printf("Inverse does not exist\n");
        return -1;
    } else {
        return (x % phi + phi) % phi;
    }
}
void factorize(int n, int *p, int *q) {
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0) {
            *p = i;
            *q = n / i;
            break;
        }
    }
}

int main() {
    int n = 3599;
    int e = 31;
    int p, q;
    factorize(n, &p, &q);
    printf("Factorized n = 3599 into p = %d and q = %d\n", p, q);

    
    int phi_n = (p - 1) * (q - 1);
    printf("Ï†(n) = (p - 1) * (q - 1) = %d\n", phi_n);

    
    int d = mod_inverse(e, phi_n);
    printf("The private key d is %d\n", d);

    return 0;
}
