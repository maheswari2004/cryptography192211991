#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to calculate letter frequency
void calculate_frequency(const char *text, int *frequency) {
    memset(frequency, 0, 26 * sizeof(int));
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            char c = toupper(text[i]);
            frequency[c - 'A']++;
        }
    }
}

// Function to print a frequency table
void print_frequency(const int *frequency) {
    for (int i = 0; i < 26; i++) {
        if (frequency[i] > 0) {
            printf("%c: %d\n", 'A' + i, frequency[i]);
        }
    }
}

// Function to sort frequencies in descending order
void sort_frequency(int *frequency, int *sorted_indices) {
    for (int i = 0; i < 26; i++) {
        sorted_indices[i] = i;
    }
    for (int i = 0; i < 25; i++) {
        for (int j = i + 1; j < 26; j++) {
            if (frequency[sorted_indices[i]] < frequency[sorted_indices[j]]) {
                int temp = sorted_indices[i];
                sorted_indices[i] = sorted_indices[j];
                sorted_indices[j] = temp;
            }
        }
    }
}

// Function to apply a substitution cipher
void apply_substitution(const char *ciphertext, char *plaintext, const char *substitution) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            char c = toupper(ciphertext[i]);
            plaintext[i] = substitution[c - 'A'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to generate a substitution from the sorted frequency
void generate_substitution(const int *sorted_indices, char *substitution) {
    const char *frequency_order = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
    for (int i = 0; i < 26; i++) {
        substitution[sorted_indices[i]] = frequency_order[i];
    }
}

// Main function
int main() {
    char ciphertext[1024];
    int frequency[26] = {0};
    int sorted_indices[26];
    char substitution[26];
    char plaintext[1024];
    
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline

    calculate_frequency(ciphertext, frequency);
    
    printf("Frequency analysis:\n");
    print_frequency(frequency);

    sort_frequency(frequency, sorted_indices);
    generate_substitution(sorted_indices, substitution);

    printf("Generated substitution key:\n");
    for (int i = 0; i < 26; i++) {
        printf("%c -> %c\n", 'A' + i, substitution[i]);
    }

    apply_substitution(ciphertext, plaintext, substitution);
    printf("Possible plaintext:\n%s\n", plaintext);

    return 0;
}
