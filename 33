#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Initial Permutation (IP) table
static const uint8_t IP[64] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

// Final Permutation (IP^-1) table
static const uint8_t IP_INV[64] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

// Expansion (E) table
static const uint8_t E[48] = {
    32, 1, 2, 3, 4, 5,
    4, 5, 6, 7, 8, 9,
    8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29,
    28, 29, 30, 31, 32, 1
};

// Permutation (P) table
static const uint8_t P[32] = {
    16, 7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25
};

// S-boxes (S1 to S8)
static const uint8_t S[8][64] = {
    { // S1
        14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
        0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
        4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
        15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
    },
    { // S2
        15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
        3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
        0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
        13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
    },
    { // S3
        10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
        13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
        13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
        1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12
    },
    { // S4
        7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
        13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
        10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
        3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
    },
    { // S5
        2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
        14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
        4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
        11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
    },
    { // S6
        12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
        10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
        9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
        4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
    },
    { // S7
        4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
        13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
        1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
        6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
    },
    { // S8
        13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
        1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
        7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
        2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
    }
};

// Permuted Choice 1 (PC-1) table
static const uint8_t PC1[56] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4
};

// Permuted Choice 2 (PC-2) table
static const uint8_t PC2[48] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

// Number of left shifts for each round
static const uint8_t SHIFTS[16] = {
    1, 1, 2, 2, 2, 2, 2, 2,
    1, 2, 2, 2, 2, 2, 2, 1
};

// Function prototypes
void permute(const uint8_t *input, uint8_t *output, const uint8_t *table, int n);
void generate_subkeys(const uint8_t *key, uint8_t subkeys[16][6]);
void feistel(const uint8_t *right, uint8_t *output, const uint8_t *subkey);
void des_encrypt(const uint8_t *plaintext, uint8_t *ciphertext, const uint8_t *key);
void des_decrypt(const uint8_t *ciphertext, uint8_t *plaintext, const uint8_t *key);

// Permute the input block according to the given table
void permute(const uint8_t *input, uint8_t *output, const uint8_t *table, int n) {
    for (int i = 0; i < n; i++) {
        int bit = table[i] - 1;
        int byte = bit / 8;
        int shift = 7 - (bit % 8);
        output[i / 8] |= ((input[byte] >> shift) & 0x01) << (7 - (i % 8));
    }
}

// Generate the 16 subkeys for the 16 rounds of DES
void generate_subkeys(const uint8_t *key, uint8_t subkeys[16][6]) {
    uint8_t permuted_key[7] = {0};
    uint8_t C[4] = {0};
    uint8_t D[4] = {0};

    // Perform Permuted Choice 1 (PC-1)
    permute(key, permuted_key, PC1, 56);

    // Split the permuted key into C and D halves
    for (int i = 0; i < 3; i++) {
        C[i] = permuted_key[i];
        D[i] = permuted_key[i + 3];
    }
    C[3] = permuted_key[3] & 0xF0;
    D[3] = (permuted_key[3] & 0x0F) << 4 | (permuted_key[4] >> 4);

    // Generate 16 subkeys
    for (int round = 0; round < 16; round++) {
        // Left-shift C and D by the specified number of bits
        for (int shift = 0; shift < SHIFTS[round]; shift++) {
            uint8_t carry_C = C[0] & 0x80;
            uint8_t carry_D = D[0] & 0x80;

            for (int i = 0; i < 3; i++) {
                C[i] = (C[i] << 1) | (C[i + 1] >> 7);
                D[i] = (D[i] << 1) | (D[i + 1] >> 7);
            }
            C[3] = (C[3] << 1) | (carry_C >> 3);
            D[3] = (D[3] << 1) | (carry_D >> 3);
        }

        // Combine C and D and apply Permuted Choice 2 (PC-2)
        uint8_t CD[7] = {0};
        for (int i = 0; i < 3; i++) {
            CD[i] = C[i];
            CD[i + 3] = D[i];
        }
        CD[3] = (C[3] & 0xF0) | (D[3] >> 4);
        permute(CD, subkeys[round], PC2, 48);
    }
}

// Feistel (F) function
void feistel(const uint8_t *right, uint8_t *output, const uint8_t *subkey) {
    uint8_t expanded[6] = {0};
    uint8_t temp[4] = {0};

    // Expansion (E) permutation
    permute(right, expanded, E, 48);

    // XOR with subkey
    for (int i = 0; i < 6; i++) {
        expanded[i] ^= subkey[i];
    }

    // Substitution using S-boxes
    for (int i = 0; i < 8; i++) {
        int row = ((expanded[i / 2] & 0x80) >> 6) | ((expanded[i / 2] & 0x04) >> 2);
        int col = (expanded[i / 2] & 0x78) >> 3;
        uint8_t s_value = S[i][row * 16 + col];
        if (i % 2 == 0) {
            temp[i / 2] = s_value << 4;
        } else {
            temp[i / 2] |= s_value;
        }
    }

    // Permutation (P)
    permute(temp, output, P, 32);
}

// DES encryption function
void des_encrypt(const uint8_t *plaintext, uint8_t *ciphertext, const uint8_t *key) {
    uint8_t permuted_block[8] = {0};
    uint8_t left[4] = {0};
    uint8_t right[4] = {0};
    uint8_t subkeys[16][6] = {0};

    // Initial Permutation (IP)
    permute(plaintext, permuted_block, IP, 64);

    // Split the block into left and right halves
    memcpy(left, permuted_block, 4);
    memcpy(right, permuted_block + 4, 4);

    // Generate subkeys
    generate_subkeys(key, subkeys);

    // 16 rounds of DES
    for (int round = 0; round < 16; round++) {
        uint8_t new_right[4] = {0};
        uint8_t f_output[4] = {0};

        feistel(right, f_output, subkeys[round]);

        // XOR the left half with the output of the Feistel function
        for (int i = 0; i < 4; i++) {
            new_right[i] = left[i] ^ f_output[i];
        }

        // Swap the left and right halves
        memcpy(left, right, 4);
        memcpy(right, new_right, 4);
    }

    // Combine the left and right halves and apply the Final Permutation (IP^-1)
    memcpy(permuted_block, right, 4);
    memcpy(permuted_block + 4, left, 4);
    permute(permuted_block, ciphertext, IP_INV, 64);
}

// DES decryption function (same as encryption but with subkeys in reverse order)
void des_decrypt(const uint8_t *ciphertext, uint8_t *plaintext, const uint8_t *key) {
    uint8_t permuted_block[8] = {0};
    uint8_t left[4] = {0};
    uint8_t right[4] = {0};
    uint8_t subkeys[16][6] = {0};

    // Initial Permutation (IP)
    permute(ciphertext, permuted_block, IP, 64);

    // Split the block into left and right halves
    memcpy(left, permuted_block, 4);
    memcpy(right, permuted_block + 4, 4);

    // Generate subkeys
    generate_subkeys(key, subkeys);

    // 16 rounds of DES
    for (int round = 15; round >= 0; round--) {
        uint8_t new_right[4] = {0};
        uint8_t f_output[4] = {0};

        feistel(right, f_output, subkeys[round]);

        // XOR the left half with the output of the Feistel function
        for (int i = 0; i < 4; i++) {
            new_right[i] = left[i] ^ f_output[i];
        }

        // Swap the left and right halves
        memcpy(left, right, 4);
        memcpy(right, new_right, 4);
    }

    // Combine the left and right halves and apply the Final Permutation (IP^-1)
    memcpy(permuted_block, right, 4);
    memcpy(permuted_block + 4, left, 4);
    permute(permuted_block, plaintext, IP_INV, 64);
}

// Main function to demonstrate DES encryption and decryption
int main() {
    uint8_t key[8] = {0x13, 0x34, 0x57, 0x79, 0x9B, 0xBC, 0xDF, 0xF1};
    uint8_t plaintext[8] = "ABCDEFGH";
    uint8_t ciphertext[8] = {0};
    uint8_t decrypted_text[8] = {0};

    printf("Plaintext: %s\n", plaintext);

    des_encrypt(plaintext, ciphertext, key);
    printf("Ciphertext: ");
    for (int i = 0; i < 8; i++) {
        printf("%02X ", ciphertext[i]);
    }
    printf("\n");

    des_decrypt(ciphertext, decrypted_text, key);
    printf("Decrypted text: %s\n", decrypted_text);

    return 0;
}
